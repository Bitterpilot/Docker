# docker-compose -f supportServices/docker-compose.yml up -d --build
version: "2"
services:
  # Watchtower monitors your Docker containers. If their images in the Docker Store
  # change, then watchtower will pull the new image, shutdown the running container
  # and restart with the new image and the options you originally set for the container
  # while deploying.
  watchtower:
    image: v2tec/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # --schedule "0 0 4 * * *" â€“ containers are checked for updates at 4 am everyday.
    # You can use the 6-digit cron schedule or you can specify time interval:
    # --interval 30 for checking every 30 seconds. If you want weekly, then use
    # 0 0 23 * * SUN for every update at 11 pm on Sundays.
    command: '--schedule "0 0 4 * * *" --cleanup'

  portainer:
    image: portainer/portainer
    restart: always
    networks:
      qnet-static:
        ipv4_address: 192.168.0.10
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONTAINERDIR}/portainer/data:/data
      - ${CONTAINERDIR}/shared:/shared
    environment:
      - TZ=${TimeZone}

  pihole:
    image: pihole/pihole
    restart: always
    hostname: dockaPi
    networks:
      qnet-static:
        ipv4_address: 192.168.0.3
    environment:
      - IPv6=False
      - ServerIP=192.168.0.3
      - TZ=${TimeZone}
      - DNS1="1.1.1.1"
      - DNS2="1.0.0.1"
      - WEBPASSWORD=""
    volumes:
      - ${CONTAINERDIR}/pihole/etc/pihole/:/etc/pihole/
      - ${CONTAINERDIR}/pihole/etc/dnsmasq.d/:/etc/dnsmasq.d/

  # reverse-proxy:
  #   image: traefik
  #   restart: unless-stopped
  #   command: --api --docker # Enables the web UI and tells Traefik to listen to docker
  #   networks:
  #     qnet-static:
  #       ipv4_address: 192.168.0.11
  #   ports:
  #     - "80:80" # The HTTP listen port
  #     - "8080:8080" # The Web UI (enabled by --api)
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events

  steamcache:
    image: steamcache/steamcache
    restart: unless-stopped
    networks:
      qnet-static:
        ipv4_address: 192.168.0.12
    volumes:
      - ${CONTAINERDIR}/steamCache/logs:/data/logs
      - ${CONTAINERDIR}/steamCache/cache:/data/cache
      - ${CONTAINERDIR}/steamCache/www:/var/www
      - ${CONTAINERDIR}/shared:/shared

# in container station create using network mode bridge
networks:
  qnet-static:
    driver: qnet
    ipam:
      driver: qnet
      options:
        iface: "eth1"
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.1
